// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id            String   @id @default(cuid())
  slug          String   @unique
  title         String
  excerpt       String
  content       String   @db.Text
  image         String
  category      String
  tags          String[]
  readingTime   Int
  published     Boolean  @default(false)
  publishedAt   DateTime?
  views         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  author        Author   @relation(fields: [authorId], references: [id])
  authorId      String
  
  @@index([slug])
  @@index([category])
  @@index([published, publishedAt])
}

model Author {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  bio           String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  articles      Article[]
}

model Subscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  company       String?
  verified      Boolean  @default(false)
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  downloads     Download[]
  
  @@index([email])
}

model Resource {
  id            String   @id @default(cuid())
  title         String
  description   String
  type          String   // ebook, report, guide, etc
  fileUrl       String
  previewUrl    String?
  pages         Int?
  category      String
  tags          String[]
  downloads     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  downloadLogs  Download[]
}

model Download {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id])
  subscriberId  String
  
  resource      Resource @relation(fields: [resourceId], references: [id])
  resourceId    String
  
  @@index([subscriberId])
  @@index([resourceId])
}
